Программа:
	lib.c
	test.c
	lib.h
Раньше 
	gcc -o test lib.c test.c
Теперь
	gcc -o lib.o lib.c
	gcc -o tets.o test.c
	gcc -o test lib.o test.o
Большинство меняться не будет

gmake -> make ищет файл с майк. На своем языке и выполняет его

test:	test.o	lib.o 
//Обязательно ТАБУЛЯЦИЯ в начале правила
	gcc -o test($@) (lib.o test.o)=($^)
test.o: test.c
	gcc -c -o test.o($@) test.c($<)
lib.o: lib.c
	gcc -c -o lib.o lib.c
lib.o test.o: lib.h - если lib.h помянлся - то пересобрать lib.o и test.o

посмотреть дерево: gmake -p

gcc -c -o $@ 
$@ - цель
Первый прериквизит $<
Все прериквизиты $^

%.c: %.c - шаблон
	gcc -c -o $@ $<

 $(cc) $(CFLAGS) -c -o $@ $< - уже есть в makefile(не надо писать)
 CFLAGS = -g -Wall -o0 -Werror \
 	-MD

 -include *.d (-=если нет д-файла - не ошибка)

 clean:
 	rm -rf *.d *.o test
 	модно сделать make clean

 первую цель именуют all
 all: test


/*
CC = gcc
CFLAGS = -g -Wall -o0 -Werror
GCOV_FLAGS = -fprofile-arcs -ftest-coverage

SOURCES = list.c $(EXECUTABLE).c
OBJECTS = $(SOURCES:.c = .o)
EXECUTABLE = test

all: $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(CC) $(CFLAGS) $(GCOV_FLAGS) -o $@ $^

%.o:%.c
	$(CC) -c -MD $(CFLAGS) $(GCOV_FLAGS) -o $@ $<

-include $(wildcard *.d)

valgrind:
	valgrind ./$(EXECUTABLE)

gcov:
	gcov list.gcno

clean:
	rm -f *.o *.d main.out
*/